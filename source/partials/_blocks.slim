- case block.item_type.api_key
    /- when "meta_json"
        - unless block.meta_json.empty?
    - when "section_header"
        section.content-block.block-section-header.pad style="padding-bottom: 0;" class=(block.classes.nil? ? "pb-0" : block.classes) id=block.id
            h3.section-header = block.title
    - when "writing_block"
        section.content-block.block-dialogue.pad-longform id=block.id
            - case block.layout
                - when "centered"
                    .w-full.mx-auto class="xl:max-w-4xl"
                        - unless block.block_title.empty?
                            h3.text-2xl-scale.font-sans.font-medium.leading-tight.mb-8.mt-4 = block.block_title
                            - unless block.aside.empty?
                                .aside.markdown.italic.font-normal = Kramdown::Document.new(block.aside).to_html
                            - unless block.block_image.nil?
                                = partial "partials/inline-picture", :locals => { :the_img => block.block_image, :classes => 'mb-6 xl:mb-12' }
                            - unless block.block_body.empty?
                                .block-body.markdown.font-normal = Kramdown::Document.new(block.block_body).to_html
                - else
                    - unless block.block_title.empty?
                        .flex.justify-end.mt-12
                            div class="self-end w-full md:w-2/3 lg:w-2/3 xl:w-3/5"
                                h3.text-2xl-scale.font-sans.font-medium.leading-tight.mb-3.mt-4 class="lg:mb-8" = block.block_title

                    .flex-col.flex class="md:flex-row"
                        aside class="w-full md:w-1/3 lg:w-1/3 xl:w-2/5 md:pr-8 lg:pr-12 xl:pr-16"
                            .sticky.sticky-desc
                                - unless block.aside.empty?
                                    .aside.markdown.italic.font-light.pb-8 = Kramdown::Document.new(block.aside).to_html
                                - unless block.block_image.nil?
                                    = partial "partials/inline-picture", :locals => { :the_img => block.block_image, :classes => 'mb-6 xl:mb-12' }
                        - unless block.block_body.empty?
                            div class="w-full md:w-2/3 lg:w-2/3 xl:w-3/5"
                                .block-body.markdown.font-normal = Kramdown::Document.new(block.block_body).to_html

    - when "related_work"  
        section.content-block.block-related-work.pad-longform id=block.id
            - unless block.related_work_entry.nil?
                .flex.justify-end.mt-12
                    div class="self-end w-full lg:w-2/3 xl:w-3/5"
                        = partial "partials/card-work-related", :locals => { :work => block.related_work_entry }
    - when "image_caption"
        section.content-block.block-image.relative.mx-auto.pad class=(block.theme.nil? ? nil : "bg-#{block.theme.class_name}") id=block.id
            - case block.image_layout
                - when "center"
                    figure class="block-image-center max-w-7xl mx-auto text-center"
                        = partial "partials/inline-picture", :locals => { :the_img => block.image, :classes => '' }
                        - unless block.caption.nil?
                            figcaption class="mt-12 max-w-3xl mt-0 mb-4 mx-auto"
                                - unless block.block_title.empty?
                                    h3.text-3xl.font-sans.font-medium.leading-tight.mb-3 = block.block_title
                                .markdown
                                    = Kramdown::Document.new(block.caption).to_html
                - else
                    figure class="flex flex-col xxl:flex-row xxl:items-center xxl:justify-between"
                        figcaption class="mt-12 xxl:w-1/3 xxl:pr-6 mt-0 mb-4"
                            - unless block.block_title.empty?
                                h3.text-3xl.font-sans.font-medium.leading-tight.mb-3 = block.block_title
                            .markdown.line-length
                                = Kramdown::Document.new(block.caption).to_html
                        = partial "partials/inline-picture", :locals => { :the_img => block.image, :classes => 'xxl:w-2/3' }

    - when "gallery_block"
        section.content-block.relative class=(block.theme.nil? ? nil : "bg-#{block.theme.class_name}") id=block.id
            .w-full.pad.flex.flex-col class="md:flex-row flex-wrap"
                - unless block.block_title.empty?
                    .w-full class="md:w-1/2 lg:w-1/3"
                        .sticky.sticky-desc class="md:pr-4 lg:pr-8"
                            h3.text-3xl-scale.font-sans.font-medium.leading-tight.mb-3 class="lg:mb-8" = block.block_title
                            - unless block.desc.empty?
                                .lead.font-sans.font-light.mb-3.pr-3.pb-2.markdown = Kramdown::Document.new(block.desc).to_html
                .w-full class="md:w-1/2 lg:w-2/3"
                    .block-gallery
                        ruby:
                            case block.gallery.count
                                when 0..12
                                    columns = "gallery-cols-2"
                                    colspan = "gallery-item-span"
                                when 13..99
                                    columns = "gallery-cols-3"
                                    colspan = nil
                                #when 10..99
                                #    columns = "gallery-cols-4"
                                #    colspan = "gallery-item-span"
                            end
                        
                        .gallery-container.mx-auto class=columns
                            - block.gallery.each do | gallery_item |
                                figure.gallery-item class=(gallery_item.custom_data[:classes].present? ? gallery_item.custom_data[:classes] : nil)
                                    img.lozad.zoomable.rounded-scale src=gallery_item.url(w: 400, blur: 320, auto: :compress) data-src=gallery_item.url(w: 1400, auto: :compress) data-zoom-src=gallery_item.url(w: 2400, auto: :compress) alt="" width=gallery_item.width height=gallery_item.height /
                                    img.lozad.zoomable.rounded-scale src=loader_rect data-src=gallery_item.url(w: 1400, auto: :compress) data-zoom-src=gallery_item.url(w: 2400, auto: :compress) alt="" width=gallery_item.width height=gallery_item.height /
                                    / - unless gallery_item.nil? && gallery_item.empty?
                                    figcaption class="px-1 py-3 font-sans font-light italic leading-tight line-length" = (gallery_item.title.present? ? gallery_item.title : nil)
                                / = partial "partials/gallery-picture", :locals => { :the_img => gallery_item, :classes => '' }
    - when "quote_large"
        aside.content-block.block-quote.relative.w-full.pad-y-xl class=(block.theme.nil? ? nil : "bg-#{block.theme.class_name}") id=block.id
            / code = block.item_type.api_key
            div class=(block.quote_color.nil? ? nil : "text-#{block.quote_color.class_name}") = Kramdown::Document.new(block.quote_body).to_html
            - unless block.attribution.nil?
                div.attribution class=(block.quote_color.nil? ? nil : "text-#{block.quote_color.class_name}") = Kramdown::Document.new(block.attribution).to_html
    - when "text_block"
        section.content-block.block-text.relative.w-full.pad class=(block.theme.nil? ? nil : "bg-#{block.theme.class_name}") id=block.id
            / code = block.item_type.api_key
            - unless block.inline_image.nil?
                .mx-auto.max-w-5xl.flex.justify-center.items-center class="flex-col lg:flex-row"
                    .w-full.mb-4.pb-2 class="lg:w-1/2 lg:pr-12"
                        - unless block.block_title.empty?
                            h3.text-3xl.font-sans.font-medium.leading-tight.mb-3 = block.block_title
                        .markdown.lead.font-light = Kramdown::Document.new(block.block_body).to_html
                    .w-full.mb-4 class="lg:w-1/2"
                        = partial "partials/inline-picture", :locals => { :the_img => block.inline_image, :classes => '' }
            - else
                .mx-auto.max-w-2xl
                    - unless block.block_title.empty?
                        h3.text-3xl.font-sans.font-medium.leading-tight.mb-3 = block.block_title
                    .markdown.lead = Kramdown::Document.new(block.block_body).to_html
    - when "video_block"
        section.content-block.block-video.relative.w-full.pad class=(block.theme.nil? ? nil : "bg-#{block.theme.class_name}") id=block.id
            .mx-auto.max-w-7xl.flex.justify-center.items-center class="flex-col lg:flex-row"
                - if block.block_title.present? || block.video_caption.present?
                    .w-full.mb-4 class="lg:w-1/3 lg:pr-8"
                        - unless block.block_title.empty?
                            h3.text-2xl.font-sans.font-medium.leading-tight.mb-2 = block.block_title
                        - unless block.video_caption.empty?
                            .markdown.lead.max-w-xl.font-light = Kramdown::Document.new(block.video_caption).to_html
                .w-full.mb-4 class="lg:w-2/3"
                    - unless block.video_file.nil?
                        = partial "partials/video-file", :locals => { :video_file => block.video_file, :classes => '', :attr => '' }
                    - else
                        - unless block.video.nil?
                            / img src=block.video.thumbnail_url
                            - embed_url = "https://www.youtube.com/embed/" + block.video.provider_uid
                            .div class="embed-responsive aspect-ratio-16/9"
                                iframe.embed-responsive-item allow=("accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture") allowfullscreen="" frameborder="0" height=block.video.height src=embed_url width=block.video.width
                        - unless block.media_embed.nil?
                            = Kramdown::Document.new(block.media_embed).to_html